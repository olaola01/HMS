<?php
/**
 * Created by PhpStorm.
 * hospital
 * By: Olamiposi
 * 26/06/2020
 * 2020
 **/


namespace Src\models;


use PDO;
use Src\databaseHelper\DatabaseObject;
use Src\Validation\Validator;

class Patient extends DatabaseObject
{
    static protected $table_name = "users";
    static protected $columns = ['fullName', 'address', 'city', 'gender', 'email', 'password', 'regDate', 'updationDate'];

    public $id;
    public $fullName;
    public $address;
    public $city;
    public $email;
    public $gender;
    public $password_original;
    public $password;
    public $confirm_password;
    public $regDate;
    public $updationDate;
    protected $password_required = true;
    public $user_type = 2;
    protected $remove_if_password_exist_validation = true;

    public function __construct($args = [])
    {
        $this->fullName = $args['fullName'] ?? '';
        $this->address = $args['address'] ?? '';
        $this->city = $args['city'] ?? '';
        $this->email = $args['email'] ?? '';
        $this->gender = $args['gender'] ?? '';
        $this->password_original = $args['password'] ?? '';
        $this->confirm_password = $args['confirm_password'] ?? '';
    }

    public function fullname()
    {
        return $this->fullName;
    }

    protected function set_hashed_password()
    {
        $this->password = password_hash($this->password_original, PASSWORD_BCRYPT);
    }

    public function verify_password($password)
    {
        return password_verify($password, $this->password);
    }

    public function create()
    {
        $this->set_hashed_password();
        return parent::create(); // TODO: Change the autogenerated stub
    }

    public function update()
    {
        if ($this->email != '') {
            $this->remove_if_password_exist_validation = false;
        }

        if ($this->password_original != '') {
            $this->set_hashed_password();
        } else {
            $this->password_required = false;
        }
        return parent::update(); // TODO: Change the autogenerated stub
    }

    protected function validate()
    {
        $this->errors = [];

        if (Validator::is_blank($this->fullName)) {
            $this->errors[] = "Full name field is required";
        }

        if (Validator::is_blank($this->city)) {
            $this->errors[] = "City field is required";
        }

        if (Validator::is_blank($this->gender)) {
            $this->errors[] = "Gender field is required";
        }

        if (Validator::is_blank($this->address)) {
            $this->errors[] = "Address field is required";
        }

        if ($this->password_required) {
            if (Validator::is_blank($this->password_original)) {
                $this->errors[] = 'Password field cannot be blank';
            }
        }

        if ($this->password_required) {
            if (Validator::is_blank($this->confirm_password)) {
                $this->errors[] = "Confirm password field cannot be empty";
            }
        }

        if (!Validator::is_equal($this->password_original, $this->confirm_password)) {
            $this->errors[] = "Password do not match";
        }

        return $this->errors;
    }

    static public function find_by_email($email)
    {
        $sql = "SELECT * FROM " . static::$table_name . " WHERE email='" . $email . "'";
        $result = static::find_by_sql($sql);
        if (!empty($result)) {
            return array_shift($result);
        } else {
            return false;
        }
    }

    public function is_email_exists($email)
    {
        $sql = "SELECT * FROM " . static::$table_name . " WHERE `email` = :email";
        $stmt = self::$database->prepare($sql);
        $stmt->bindParam(":email", $email, PDO::PARAM_STR);
        $stmt->execute();
        $count = $stmt->rowCount();
        if ($count > 0) return true; else return false;
    }

    public static function select_id($email)
    {
        $id = '';
        $sql = "SELECT id FROM " . static::$table_name . " WHERE email='" . $email . "'";
        $stmt = self::$database->query($sql);
        while ($data = $stmt->fetch()){
            $id = $data['id'] ?? '';
        }
        return $id;
    }

    public static function use_for_ip($email){
        $sql = "SELECT * FROM users WHERE email=:email LIMIT 1";
        $stmt = self::$database->prepare($sql);
        $stmt->bindValue(':email',$email);
//        $stmt->bindValue(':pass_worD',$password);
        $stmt->execute();
        $result = $stmt->rowcount();
        if ($result==1){
            // echo "GOOD";
            return $found_account = $stmt->fetch(); // To be used to fetch, check while loop
        }else{
            // echo "BAD";
            return null;
        }
    }

}